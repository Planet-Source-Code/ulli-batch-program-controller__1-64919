VERSION 5.00
Begin VB.Form fTestWinPS 
   BorderStyle     =   4  'Festes Werkzeugfenster
   Caption         =   "Test WinPS"
   ClientHeight    =   2520
   ClientLeft      =   2775
   ClientTop       =   2295
   ClientWidth     =   9645
   LinkTopic       =   "Form1"
   LockControls    =   -1  'True
   MaxButton       =   0   'False
   MinButton       =   0   'False
   ScaleHeight     =   168
   ScaleMode       =   3  'Pixel
   ScaleWidth      =   643
   ShowInTaskbar   =   0   'False
   Begin VB.ListBox lstResults 
      Height          =   2010
      Left            =   1620
      TabIndex        =   1
      Top             =   210
      Width           =   7590
   End
   Begin VB.CommandButton btStart 
      Caption         =   "Start"
      Height          =   495
      Left            =   195
      TabIndex        =   0
      Top             =   210
      Width           =   1215
   End
End
Attribute VB_Name = "fTestWinPS"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

'Records from data streams (reduced to record keys)
Private Key13 As Long, Key12 As Long, Key11 As Long
Private Key23 As Long, Key22 As Long, Key21 As Long
Private Key33 As Long, Key32 As Long, Key31 As Long

'Source Code generated by PS_Version 2.17.5 Â© 2003 UMGEDV GmbH
Public WithEvents PS As cPS
Attribute PS.VB_VarHelpID = -1

Public Function RunBatchProg(RunId As String) As Long

    Set PS = New cPS
    'PS.CreateSkeleton 3, 3: Stop
    With PS
        If .VersionNumber >= 21705 Then
            .MaxNumber = 3
            .NumberOfStreams = 3
            .NumberOfGroups = 3
            'Set other properties as appropriate...

            .Animation(Screen.Width / 2, Screen.Height / 2, RunId) = True
            .TraceRequest = PS_Normal
            RunBatchProg = .Run(RunId)
          Else
            MsgBox "PS Version incompatible; DLL Version Info is:" & vbCrLf & vbCrLf & .Version
            RunBatchProg = -1
        End If
    End With
    Set PS = Nothing

End Function

Private Sub btStart_Click()

    With lstResults
        .Clear
        .AddItem "This will take about one minute - please be patient"
        .AddItem "The run will process roughly 700000 records and issue over four million action calls"
        .AddItem vbNullString
        DoEvents
        .AddItem "RunBatchProg returned " & RunBatchProg("WinPS Demo")
    End With

End Sub

Private Sub PS_ActionRequest(ByVal Switch As Long, ByVal ActionType As WinPS.ActionTypes, ByVal ActionNumber As Long, ByVal ActionName As String)

    With PS
        Select Case ActionType
          Case PS_InitializeProgram
            InitializeProgram

          Case PS_OpenStream
            Select Case ActionNumber
              Case 1
                If Not OpenStream1 Then
                    .StreamState(1) = PS_Absent
                End If
              Case 2
                If Not OpenStream2 Then
                    .StreamState(2) = PS_Absent
                End If
              Case 3
                If Not OpenStream3 Then
                    .StreamState(3) = PS_Absent
                End If
            End Select

          Case PS_FetchRecord
            Select Case ActionNumber
              Case 1
                If Not FetchRecordFrom1 Then
                    .StreamState(1) = PS_EndOfStream
                End If
              Case 2
                If Not FetchRecordFrom2 Then
                    .StreamState(2) = PS_EndOfStream
                End If
              Case 3
                If Not FetchRecordFrom3 Then
                    .StreamState(3) = PS_EndOfStream
                End If
            End Select

          Case PS_CheckRecord
            Select Case ActionNumber
              Case 1
                If CheckRecordFrom1 Then
                    .StreamState(1) = PS_ReleaseRecord
                End If
              Case 2
                If CheckRecordFrom2 Then
                    .StreamState(2) = PS_ReleaseRecord
                End If
              Case 3
                If CheckRecordFrom3 Then
                    .StreamState(3) = PS_ReleaseRecord
                End If
            End Select

          Case PS_SequenceError
            SequenceError

          Case PS_OpenGroup
            Select Case ActionNumber
              Case 0
                InitializeProcessing
              Case 3
                OpenGroup3
              Case 2
                OpenGroup2
              Case 1
                OpenGroup1
            End Select

          Case PS_ProcessRecord
            Select Case ActionNumber
              Case 1
                ProcessRecordFrom1
              Case 2
                ProcessRecordFrom2
              Case 3
                ProcessRecordFrom3
            End Select

          Case PS_CloseGroup
            Select Case ActionNumber
              Case 1
                CloseGroup1
              Case 2
                CloseGroup2
              Case 3
                CloseGroup3
              Case 0
                TerminateProcessing
            End Select

          Case PS_CloseStream
            Select Case ActionNumber
              Case 1
                CloseStream1
              Case 2
                CloseStream2
              Case 3
                CloseStream3
            End Select

          Case PS_TerminateProgram
            TerminateProgram

        End Select
    End With

End Sub

Private Sub PS_Trace(ByVal TraceMessage As String)

    lstResults.AddItem TraceMessage

End Sub

Private Sub PS_Error(ByVal ErrorNumber As Long, ByVal ErrorText As String)

    lstResults.AddItem "Error (" & ErrorNumber & ") " & ErrorText

End Sub

Private Sub InitializeProgram()

  'Place code to initialize the program here

    Key13 = 0
    Key12 = 0
    Key11 = 0
    Key23 = 0
    Key22 = 0
    Key21 = 0
    Key33 = 0
    Key32 = 0
    Key31 = 0

End Sub

Private Function OpenStream1() As Boolean

  'Place code to open data stream 1 here
  'Return True if data stream was opened successfully and is available

    OpenStream1 = True 'default - data stream present and successfully opened

End Function

Private Function OpenStream2() As Boolean

  'Place code to open data stream 2 here
  'Return True if data stream was opened successfully and is available

    OpenStream2 = True 'default - data stream present and successfully opened

End Function

Private Function OpenStream3() As Boolean

  'Place code to open data stream 3 here
  'Return True if data stream was opened successfully and is available

    OpenStream3 = True 'default - data stream present and successfully opened

End Function

Private Function FetchRecordFrom1() As Boolean

  'Place code to fetch next record from data stream 1 here
  'Return True if record was fetched successfully and is available

    Key13 = Key13 + Rnd
    Key12 = Key12 + Rnd
    Key11 = Key11 + Rnd
    FetchRecordFrom1 = (Rnd < 0.999995) 'simulate EOF

End Function

Private Function FetchRecordFrom2() As Boolean

  'Place code to fetch next record from data stream 2 here
  'Return True if record was fetched successfully and is available

    Key23 = Key23 + Rnd
    Key22 = Key22 + Rnd
    Key21 = Key21 + Rnd
    FetchRecordFrom2 = (Rnd < 0.999995) 'simulate EOF

End Function

Private Function FetchRecordFrom3() As Boolean

  'Place code to fetch next record from data stream 3 here
  'Return True if record was fetched successfully and is available

    Key33 = Key33 + Rnd
    Key32 = Key32 + Rnd
    Key31 = Key31 + Rnd
    FetchRecordFrom3 = (Rnd < 0.999995) 'simulate EOF

End Function

Private Function CheckRecordFrom1() As Boolean

  'Place code to check and filter record from data stream 1 here
  'Return True if record passed thru filter and is available for processing

    CheckRecordFrom1 = (Rnd < 0.8) 'simulate filter condition
    If CheckRecordFrom1 Then
        With PS
            'Transfer record key(s) to PS
            .RecordKey(1, 3) = Key13
            .RecordKey(1, 2) = Key12
            .RecordKey(1, 1) = Key11
        End With
    End If

End Function

Private Function CheckRecordFrom2() As Boolean

  'Place code to check and filter record from data stream 2 here
  'Return True if record passed thru filter and is available for processing

    CheckRecordFrom2 = (Rnd < 0.8) 'simulate filter condition
    If CheckRecordFrom2 Then
        With PS
            'Transfer record key(s) to PS
            .RecordKey(2, 3) = Key23
            .RecordKey(2, 2) = Key22
            .RecordKey(2, 1) = Key21
        End With
    End If

End Function

Private Function CheckRecordFrom3() As Boolean

  'Place code to check and filter record from data stream 3 here
  'Return True if record passed thru filter and is available for processing

    CheckRecordFrom3 = (Rnd < 0.8) 'simulate filter condition
    If CheckRecordFrom3 Then
        With PS
            'Transfer record key(s) to PS
            .RecordKey(3, 3) = Key33
            .RecordKey(3, 2) = Key32
            .RecordKey(3, 1) = Key31
        End With
    End If

End Function

Private Sub SequenceError()

  'Place code to handle key sequence error here

End Sub

Private Sub InitializeProcessing()

  'Place code to initialize processing here

End Sub

Private Sub OpenGroup3()

  'Place code to open group 3 here

End Sub

Private Sub OpenGroup2()

  'Place code to open group 2 here

End Sub

Private Sub OpenGroup1()

  'Place code to open group 1 here

End Sub

Private Sub ProcessRecordFrom1()

  'Place code to process record from data stream 1 here

End Sub

Private Sub ProcessRecordFrom2()

  'Place code to process record from data stream 2 here

End Sub

Private Sub ProcessRecordFrom3()

  'Place code to process record from data stream 3 here

End Sub

Private Sub CloseGroup1()

  'Place code to close group 1 here

End Sub

Private Sub CloseGroup2()

  'Place code to close group 2 here

End Sub

Private Sub CloseGroup3()

  'Place code to close group 3 here

End Sub

Private Sub TerminateProcessing()

  'Place code to terminate processing here

End Sub

Private Sub CloseStream1()

  'Place code to close data stream 1 here

End Sub

Private Sub CloseStream2()

  'Place code to close data stream 2 here

End Sub

Private Sub CloseStream3()

  'Place code to close data stream 3 here

End Sub

Private Sub TerminateProgram()

  'Place code to terminate program here

End Sub

':) Ulli's VB Code Formatter V2.21.6 (2006-Mrz-30 15:31)  Decl: 9  Code: 387  Total: 396 Lines
':) CommentOnly: 42 (10,6%)  Commented: 16 (4%)  Empty: 116 (29,3%)  Max Logic Depth: 5
